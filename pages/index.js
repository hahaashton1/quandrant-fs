import Head from "next/head";
import React from "react";
import {
  useAccount,
  useContractWrite,
  usePrepareContractWrite,
  useContractRead,
} from "wagmi";
import { mainABI, mainAddress } from "../contract";
import { useState, useEffect } from "react";
import { useDebounce } from "use-debounce";
import { ethers } from "ethers";

export default function Home() {
  const [score, setScore] = useState(0);
  const [scoreRecords, setScoreRecords] = useState();
  const [flag, setFlag] = useState(false);
  // I'm not even sure if the debounce is working properly lol
  const debounceScore = parseInt(useDebounce(score, 1000));

  // Get current datetime
  const getDT = () => {
    const date = new Date().getTime();
    const birthDateInUnixTimestamp = Math.floor(date / 1000);
    return birthDateInUnixTimestamp;
  };

  const handleInputChange = (e) => {
    setScore(e.target.value);
  };

  // Global WAGMI hooks to access the connected wallet
  const { address, isConnected, isDisconnected } = useAccount();

  // WAGMI hook to get all scores belonging to a user
  const getUserScores = useContractRead({
    address: mainAddress,
    abi: mainABI,
    functionName: "getUserScores",
    args: [address],
    onSuccess(data) {
      console.log(data);
      setScoreRecords(data);
    },
  });

  // WAGMI hook configuration
  // uint8 _score, uint8 _datetime
  const { config } = usePrepareContractWrite({
    address: mainAddress,
    abi: mainABI,
    functionName: "play",
    args: [debounceScore, getDT()],
  });

  // WAGMI hook for calling play function
  const { write: play } = useContractWrite({
    ...config,
    onSuccess(data) {
      console.log("Success", data);
      getUserScores.refetch();
    },
  });

  // useEffect hook
  useEffect(() => {
    if (isConnected) {
      setFlag(true);
      getUserScores.refetch();
    } else if (isDisconnected) {
      setFlag(false);
      setScoreRecords(null);
    }
  }, [isConnected, isDisconnected, getUserScores]);

  return (
    <div>
      <Head>
        <title>EGame</title>
        <meta name="description" content="Generated by create next app" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <main>
        <div className="grid place-items-center justify-center">
          <div className="grid grid-cols-1 gap-6 content-center max-w-screen-lg">
            <div className="card w-96 bg-primary shadow-xl items-center">
              <div className="card-body">
                <h2 className="card-title">Lets play!</h2>
                <p>Please enter a game score!</p>
                <div className="input-group">
                  <input
                    type="number"
                    defaultValue={0}
                    placeholder="Enter score"
                    className="input input-bordered"
                    onChange={(e) => {
                      handleInputChange(e);
                    }}
                    disabled={!flag}
                  />
                  <button
                    className="btn btn-square"
                    onClick={() => play?.()}
                    disabled={!flag}
                  >
                    Play
                  </button>
                </div>
              </div>
            </div>

            {scoreRecords && (
              <div>
                <div className="pb-4 text-center">
                  <h2>Your scores</h2>
                </div>
                <div className="block overflow-y-auto h-[50vh]">
                  <table className="table table-zebra w-full">
                    <thead>
                      <tr>
                        <th>Unix Timestamp (s)</th>
                        <th>Score</th>
                      </tr>
                    </thead>
                    <tbody>
                      {scoreRecords.map((record) => (
                        <tr key={ethers.BigNumber.from(record[0]).toNumber()}>
                          <td>{ethers.BigNumber.from(record[0]).toNumber()}</td>
                          <td>{ethers.BigNumber.from(record[1]).toNumber()}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}
